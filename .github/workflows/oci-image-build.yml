name: Build Multi-Platform OCI Images

on:
  schedule:
    - cron: '11 1 1 * *'
  push:
    branches:
      - main
    paths:
      - 'oci/gitfence/Dockerfile'
  pull_request:
    paths:
      - 'oci/gitfence/Dockerfile'
  workflow_dispatch:

jobs:
  build:
    name: "Build ${{ matrix.image.name }}"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        image:
          - name: masoudbahar/gitfence
            context: oci/gitfence
            platforms: linux/amd64,linux/386,linux/arm/v6,linux/arm/v7,linux/arm64/v8
            publish-on-ghcr: true
            publish-on-dockerhub: false
            sign-with-cosign: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Custom Variables
        id: custom
        run: |
          echo "::set-output name=date::$(date -u +'%Y-%m-%d %H:%M:%S')"
          echo "::set-output name=version::$(date -u +'%Y%m%d.%H%M%S')"
          echo "::set-output name=short_sha::${GITHUB_SHA::8}"

      - name: Set Target OCI Registry
        run: |
          if ${{ matrix.image.publish-on-ghcr }} && ! ${{ matrix.image.publish-on-dockerhub }}; then
            echo "IMAGES=ghcr.io/${{ matrix.image.name }}" >> $GITHUB_ENV
          elif ! ${{ matrix.image.publish-on-ghcr }} && ${{ matrix.image.publish-on-dockerhub }}; then
            echo "IMAGES=${{ matrix.image.name }}" >> $GITHUB_ENV
          elif ${{ matrix.image.publish-on-ghcr }} && ${{ matrix.image.publish-on-dockerhub }}; then
            echo "IMAGES=${{ matrix.image.name }},ghcr.io/${{ matrix.image.name }}" >> $GITHUB_ENV
          fi

      - name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.IMAGES }}
          flavor: |
            latest=true
          tags: |
            type=raw,enable=true,prefix=v,suffix=,value=${{ steps.custom.outputs.version }}
            type=sha,enable=true,prefix=,suffix=,format=short

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        if: ${{ matrix.image.publish-on-ghcr }}
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: true

      - name: Login to DockerHub
        if: ${{ matrix.image.publish-on-dockerhub }}
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          logout: true

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: ${{ matrix.image.context }}
          platforms: ${{ matrix.image.platforms }}
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            VERSION=${{ steps.custom.outputs.version }}
            LICENSE=${{ github.event.repository.license.spdx_id }}
            VCS_URL=${{ github.event.repository.html_url }}
            VCS_REF=${{ steps.custom.outputs.short_sha }}
            BUILD_DATE=${{ steps.custom.outputs.date }}
          push: ${{ github.event_name != 'pull_request' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install sigstore/cosign
        if: ${{ matrix.image.sign-with-cosign && github.event_name != 'pull_request' }}
        uses: sigstore/cosign-installer@v2.6.0

      - name: Sign the Image with sigstore/cosign
        if: ${{ matrix.image.sign-with-cosign && github.event_name != 'pull_request' }}
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSPHRASE }}
          COSIGN_EXPERIMENTAL: 0
        run: |
          echo "${{ secrets.COSIGN_KEY }}" > /tmp/cosign.key
          if ${{ matrix.image.publish-on-ghcr }}; then
            cosign sign -key /tmp/cosign.key ghcr.io/${{ matrix.image.name }}
          fi
          if ${{ matrix.image.publish-on-dockerhub }}; then
            cosign sign -key /tmp/cosign.key ${{ matrix.image.name }}
          fi

      - name: Update DockerHub Repository Description
        if: ${{ matrix.image.publish-on-dockerhub && github.event_name != 'pull_request' }}
        uses: peter-evans/dockerhub-description@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ${{ matrix.image.name }}
          short-description: 'An OCI image, for creating and managing GPG and Age keys'
          readme-filepath: ./oci/gitfence/README.md
